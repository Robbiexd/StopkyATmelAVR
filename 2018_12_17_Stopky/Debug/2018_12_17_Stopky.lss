
2018_12_17_Stopky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000336  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800102  00800102  000003cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c13  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ba  00000000  00000000  0000109b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d3  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049c  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c8  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_16>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	b4 00       	.word	0x00b4	; ????
  8e:	96 00       	.word	0x0096	; ????
  90:	98 00       	.word	0x0098	; ????
  92:	9a 00       	.word	0x009a	; ????
  94:	9c 00       	.word	0x009c	; ????
  96:	9e 00       	.word	0x009e	; ????
  98:	a0 00       	.word	0x00a0	; ????
  9a:	a2 00       	.word	0x00a2	; ????
  9c:	a4 00       	.word	0x00a4	; ????
  9e:	a6 00       	.word	0x00a6	; ????
  a0:	a8 00       	.word	0x00a8	; ????
  a2:	aa 00       	.word	0x00aa	; ????
  a4:	ac 00       	.word	0x00ac	; ????
  a6:	ae 00       	.word	0x00ae	; ????
  a8:	b0 00       	.word	0x00b0	; ????
  aa:	b2 00       	.word	0x00b2	; ????

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e1       	ldi	r29, 0x10	; 16
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e3       	ldi	r30, 0x36	; 54
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 30       	cpi	r26, 0x02	; 2
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a2 e0       	ldi	r26, 0x02	; 2
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	aa 30       	cpi	r26, 0x0A	; 10
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  e2:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <mcu_init>:
uint8_t stav = 0, tlac; //0 .. reset, 1 .. bezi, 2 .. zastaveno

void mcu_init(void)
{
	//prepneme PORTC a PORTA<4,2:0> do vystupniho rezimu
	DDRC = 0xFF;
  ea:	9f ef       	ldi	r25, 0xFF	; 255
  ec:	94 bb       	out	0x14, r25	; 20
	DDRA = DDRA | 0b00010111;
  ee:	8a b3       	in	r24, 0x1a	; 26
  f0:	87 61       	ori	r24, 0x17	; 23
  f2:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	3f ef       	ldi	r19, 0xFF	; 255
  f8:	8c e2       	ldi	r24, 0x2C	; 44
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	30 40       	sbci	r19, 0x00	; 0
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <mcu_init+0x10>
 102:	00 c0       	rjmp	.+0      	; 0x104 <mcu_init+0x1a>
 104:	00 00       	nop
	_delay_ms(1000);
	//vsechno zhasneme
	PORTC = 0xFF;
 106:	95 bb       	out	0x15, r25	; 21
	PORTA = PORTA | 0b00010111;
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	87 61       	ori	r24, 0x17	; 23
 10c:	8b bb       	out	0x1b, r24	; 27
	
	//FOC0 WGM00 COM01 COM00 WGM01 CS02 CS01 CS00 - tccr0/TCCR0 =| (1 << CS2); /// _BV() bit value
	
	//OCF2 TOV2 ICF1 OCF1A OCF1B TOV1 OCF0 TOV0  - TIFR
	TIFR = TIFR &  ~(1 << TOV0);
 10e:	86 b7       	in	r24, 0x36	; 54
 110:	8e 7f       	andi	r24, 0xFE	; 254
 112:	86 bf       	out	0x36, r24	; 54
	
	//OCIE2 TOIE2 TICIE1 OCIE1A OCIE1B TOIE1 OCIE0 TOIE0 -  TIMSK
	TIMSK = TIMSK | (1 << TOIE0);
 114:	87 b7       	in	r24, 0x37	; 55
 116:	81 60       	ori	r24, 0x01	; 1
 118:	87 bf       	out	0x37, r24	; 55
	sei();
 11a:	78 94       	sei
 11c:	08 95       	ret

0000011e <bin2segm>:
//sw decoder z bin(bcd) na 7segm
uint8_t bin2segm(uint8_t vstup)
{	
	
	vstup = vstup & 0x0F;//vstup = vstup mod 16
	switch(vstup)
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	ea 5b       	subi	r30, 0xBA	; 186
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	0c 94 93 01 	jmp	0x326	; 0x326 <__tablejump2__>
	{
		case 0: return 0b00111111;
		case 1: return 0b00000110;
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	08 95       	ret
		case 2: return 0b01011011;
 130:	8b e5       	ldi	r24, 0x5B	; 91
 132:	08 95       	ret
		case 3: return 0b01101101;
 134:	8d e6       	ldi	r24, 0x6D	; 109
 136:	08 95       	ret
		case 4: return 0b01100110;
 138:	86 e6       	ldi	r24, 0x66	; 102
 13a:	08 95       	ret
		case 5: return 0b01101101;
 13c:	8d e6       	ldi	r24, 0x6D	; 109
 13e:	08 95       	ret
		case 6: return 0b01111101;
 140:	8d e7       	ldi	r24, 0x7D	; 125
 142:	08 95       	ret
		case 7: return 0b00000111;
 144:	87 e0       	ldi	r24, 0x07	; 7
 146:	08 95       	ret
		case 8: return 0b01111111;
 148:	8f e7       	ldi	r24, 0x7F	; 127
 14a:	08 95       	ret
		case 9: return 0b01101111;
 14c:	8f e6       	ldi	r24, 0x6F	; 111
 14e:	08 95       	ret
		case 0xA: return 0b01110111;
 150:	87 e7       	ldi	r24, 0x77	; 119
 152:	08 95       	ret
		case 0xB: return 0b01111100;
 154:	8c e7       	ldi	r24, 0x7C	; 124
 156:	08 95       	ret
		case 0xC: return 0b00111001;
 158:	89 e3       	ldi	r24, 0x39	; 57
 15a:	08 95       	ret
		case 0xD: return 0b00111001;
 15c:	89 e3       	ldi	r24, 0x39	; 57
 15e:	08 95       	ret
		case 0xE: return 0b00111001;
 160:	89 e3       	ldi	r24, 0x39	; 57
 162:	08 95       	ret
		case 0xF: return 0b00111001;
 164:	89 e3       	ldi	r24, 0x39	; 57
 166:	08 95       	ret
{	
	
	vstup = vstup & 0x0F;//vstup = vstup mod 16
	switch(vstup)
	{
		case 0: return 0b00111111;
 168:	8f e3       	ldi	r24, 0x3F	; 63
		case 0xE: return 0b00111001;
		case 0xF: return 0b00111001;
	}
	
	return 0b00111001;
}
 16a:	08 95       	ret

0000016c <vypocitejObrazy>:
void vypocitejObrazy( uint8_t cislo0,  uint8_t cislo1)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	d8 2f       	mov	r29, r24
 172:	c6 2f       	mov	r28, r22
	segm0 = ~(bin2segm(cislo0)); //DOLNI 4 BITY
 174:	0e 94 8f 00 	call	0x11e	; 0x11e <bin2segm>
 178:	80 95       	com	r24
 17a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <segm0>
	segm1 = ~(bin2segm(cislo0 >> 4)); //horni 4 BITY
 17e:	8d 2f       	mov	r24, r29
 180:	82 95       	swap	r24
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	0e 94 8f 00 	call	0x11e	; 0x11e <bin2segm>
 188:	80 95       	com	r24
 18a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <segm1>
	segm2 = ~(bin2segm(cislo1)); //DOLNI 4 BITY
 18e:	8c 2f       	mov	r24, r28
 190:	0e 94 8f 00 	call	0x11e	; 0x11e <bin2segm>
 194:	80 95       	com	r24
 196:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <segm2>
	segm4 = ~(bin2segm(cislo1 >> 4)); //horni 4 BITY
 19a:	8c 2f       	mov	r24, r28
 19c:	82 95       	swap	r24
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	0e 94 8f 00 	call	0x11e	; 0x11e <bin2segm>
 1a4:	80 95       	com	r24
 1a6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <segm4>
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <__vector_16>:
}

//obsluha prerusdeni

ISR(TIMER0_OVF_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	static unsigned char pocet9 = 9;
	pocet9 -= 1;
 1d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d6:	81 50       	subi	r24, 0x01	; 1
	if (pocet9 == 0)
 1d8:	19 f0       	breq	.+6      	; 0x1e0 <__vector_16+0x30>
//obsluha prerusdeni

ISR(TIMER0_OVF_vect)
{
	static unsigned char pocet9 = 9;
	pocet9 -= 1;
 1da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1de:	19 c0       	rjmp	.+50     	; 0x212 <__vector_16+0x62>
	if (pocet9 == 0)
	{
		pocet9 = 9;
 1e0:	89 e0       	ldi	r24, 0x09	; 9
 1e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		setiny += 1;
 1e6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <setiny>
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <setiny>
		if (setiny == 100)
 1f0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <setiny>
 1f4:	84 36       	cpi	r24, 0x64	; 100
 1f6:	39 f4       	brne	.+14     	; 0x206 <__vector_16+0x56>
		{
			sekundy += 1;
 1f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sekundy>
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sekundy>
			setiny = 0;
 202:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <setiny>
		}
		vypocitejObrazy(setiny, sekundy);
 206:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <sekundy>
 20a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <setiny>
 20e:	0e 94 b6 00 	call	0x16c	; 0x16c <vypocitejObrazy>
	}

	}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <tlacitka>:
}
void tlacitka(void)
{
	//vypneme napajeni
	//vsechno zhasneme
	PORTC = 0xFF;
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	85 bb       	out	0x15, r24	; 21
	PORTA = PORTA | 0b00010111;
 238:	8b b3       	in	r24, 0x1b	; 27
 23a:	87 61       	ori	r24, 0x17	; 23
 23c:	8b bb       	out	0x1b, r24	; 27
	//prepneme
	//PORTC<2:0> (tlac) do vstupniho rezimu
	DDRC &= ~(1 << PC2 | 1 << PC1 | 1 << PC0);
 23e:	84 b3       	in	r24, 0x14	; 20
 240:	88 7f       	andi	r24, 0xF8	; 248
 242:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	88 e1       	ldi	r24, 0x18	; 24
 246:	8a 95       	dec	r24
 248:	f1 f7       	brne	.-4      	; 0x246 <tlacitka+0x12>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <tlacitka+0x18>
	_delay_us(5);
	tlac = PINC;
 24c:	83 b3       	in	r24, 0x13	; 19
 24e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tlac>
	//prepneme
	//PORTC<2:0> (tlac) do vstupniho rezimu
	DDRC |= (1 << PC2 | 1 << PC1 | 1 << PC0);
 252:	84 b3       	in	r24, 0x14	; 20
 254:	87 60       	ori	r24, 0x07	; 7
 256:	84 bb       	out	0x14, r24	; 20
	
	if((tlac & 0b1) == 0) //tlac0 - START 
 258:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tlac>
 25c:	80 fd       	sbrc	r24, 0
 25e:	06 c0       	rjmp	.+12     	; 0x26c <tlacitka+0x38>
	{
		stav = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		//pustime stopky
		TCCR0 |= (1 << CS02);
 266:	83 b7       	in	r24, 0x33	; 51
 268:	84 60       	ori	r24, 0x04	; 4
 26a:	83 bf       	out	0x33, r24	; 51
	}
	if((tlac & 0b10) == 0) //tlac0 - STop
 26c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tlac>
 270:	81 fd       	sbrc	r24, 1
 272:	06 c0       	rjmp	.+12     	; 0x280 <tlacitka+0x4c>
	{
		stav = 2;
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		//zastavime stopky
		TCCR0 &= ~(1 << CS02);
 27a:	83 b7       	in	r24, 0x33	; 51
 27c:	8b 7f       	andi	r24, 0xFB	; 251
 27e:	83 bf       	out	0x33, r24	; 51
	} 
	
	if((tlac & 0b100) == 0) //tlac0 - reset 
 280:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tlac>
 284:	82 fd       	sbrc	r24, 2
 286:	0c c0       	rjmp	.+24     	; 0x2a0 <tlacitka+0x6c>
	{
		stav = 0;
 288:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		setiny = sekundy = 0x00;
 28c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <sekundy>
 290:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <setiny>
		vypocitejObrazy(setiny, sekundy);
 294:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <sekundy>
 298:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <setiny>
 29c:	0e 94 b6 00 	call	0x16c	; 0x16c <vypocitejObrazy>
 2a0:	08 95       	ret

000002a2 <multiplex>:
}

void multiplex(void)
{
	//nakopiruje hodnotu na port
	PORTC = segm0;
 2a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <segm0>
 2a6:	85 bb       	out	0x15, r24	; 21
	//zapneme napajeni
	PORTA = PORTA & ~(1 << PA0);
 2a8:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	97 e4       	ldi	r25, 0x47	; 71
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <multiplex+0xc>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <multiplex+0x12>
 2b4:	00 00       	nop
	//pockame 10ms
	_delay_ms(5);
	//vypneme napajeni
	PORTA |= (1 << PA0);
 2b6:	d8 9a       	sbi	0x1b, 0	; 27
	
	//nakopiruje hodnotu na port
	PORTC = segm1;
 2b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <segm1>
 2bc:	85 bb       	out	0x15, r24	; 21
	//zapneme napajeni
	PORTA = PORTA & ~(1 << PA1);
 2be:	d9 98       	cbi	0x1b, 1	; 27
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	97 e4       	ldi	r25, 0x47	; 71
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <multiplex+0x22>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <multiplex+0x28>
 2ca:	00 00       	nop
	//pockame 10ms
	_delay_ms(5);
	//vypneme napajeni
	PORTA |= (1 << PA1);
 2cc:	d9 9a       	sbi	0x1b, 1	; 27
	
	//nakopiruje hodnotu na port
	PORTC = segm2;
 2ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <segm2>
 2d2:	85 bb       	out	0x15, r24	; 21
	//zapneme napajeni
	PORTA = PORTA & ~(1 << PA2);
 2d4:	da 98       	cbi	0x1b, 2	; 27
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	97 e4       	ldi	r25, 0x47	; 71
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <multiplex+0x38>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <multiplex+0x3e>
 2e0:	00 00       	nop
	//pockame 10ms
	_delay_ms(5);
	//vypneme napajeni
	PORTA |= (1 << PA2);
 2e2:	da 9a       	sbi	0x1b, 2	; 27

	//nakopiruje hodnotu na port
	PORTC = segm4;
 2e4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <segm4>
 2e8:	85 bb       	out	0x15, r24	; 21
	//zapneme napajeni
	PORTA = PORTA & ~(1 << PA4);
 2ea:	dc 98       	cbi	0x1b, 4	; 27
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	97 e4       	ldi	r25, 0x47	; 71
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <multiplex+0x4e>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <multiplex+0x54>
 2f6:	00 00       	nop
	//pockame 10ms
	_delay_ms(5);
	//vypneme napajeni
	PORTA |= (1 << PA4);
 2f8:	dc 9a       	sbi	0x1b, 4	; 27
 2fa:	08 95       	ret

000002fc <main>:

*/

int main(void)
{
	mcu_init();
 2fc:	0e 94 75 00 	call	0xea	; 0xea <mcu_init>
    /* Replace with your application code */
	setiny = 0x34;
 300:	84 e3       	ldi	r24, 0x34	; 52
 302:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <setiny>
	sekundy = 0x12;
 306:	82 e1       	ldi	r24, 0x12	; 18
 308:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sekundy>
	vypocitejObrazy(setiny, sekundy);
 30c:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <sekundy>
 310:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <setiny>
 314:	0e 94 b6 00 	call	0x16c	; 0x16c <vypocitejObrazy>
	multiplex();
 318:	0e 94 51 01 	call	0x2a2	; 0x2a2 <multiplex>
    while (1) 
    {
		tlacitka();
 31c:	0e 94 1a 01 	call	0x234	; 0x234 <tlacitka>
		multiplex();
 320:	0e 94 51 01 	call	0x2a2	; 0x2a2 <multiplex>
 324:	fb cf       	rjmp	.-10     	; 0x31c <main+0x20>

00000326 <__tablejump2__>:
 326:	ee 0f       	add	r30, r30
 328:	ff 1f       	adc	r31, r31
 32a:	05 90       	lpm	r0, Z+
 32c:	f4 91       	lpm	r31, Z
 32e:	e0 2d       	mov	r30, r0
 330:	09 94       	ijmp

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
